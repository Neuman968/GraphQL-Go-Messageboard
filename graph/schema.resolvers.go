package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"

	"messageboard.example.graphql/graph/model"
)

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) AddPost(ctx context.Context, add model.AddNewPostInput) (*model.Post, error) {
	post := model.Post{
		ID:           "12345",
		Text:         add.Text,
		AuthorUserID: 10,
		AuthorUser:   &model.User{},
	}
	// log := log.Default()

	// log.Printf("Creating Post: %v \n", post)
	return &post, nil
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, add model.AddNewCommentInput) (*model.Comment, error) {
	return nil, fmt.Errorf("Add Comment Not implemented...")
}

// HelloWorld is the resolver for the helloWorld field.
func (r *mutationResolver) HelloWorld(ctx context.Context) (*model.User, error) {
	return &model.User{
		ID:   "Foo",
		Name: "Hello World!",
	}, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	// todo access db stuff.

	users := []*model.User{
		&model.User{
			ID:   "1234",
			Name: "spongebob",
		},
		&model.User{
			ID:   "5678",
			Name: "squidward",
		},
	}

	return users, nil
}

// GetPosts is the resolver for the getPosts field.
func (r *queryResolver) GetPosts(ctx context.Context) ([]*model.Post, error) {
	posts := []*model.Post{
		&model.Post{
			ID:           "abcd",
			Text:         "I got a new pair of shoes!",
			AuthorUserID: 10,
			AuthorUser: &model.User{
				ID:   "10",
				Name: "sandy33",
			},
		},
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
